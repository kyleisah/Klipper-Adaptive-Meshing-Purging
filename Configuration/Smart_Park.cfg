[gcode_macro SMART_PARK]
description: Parks your printhead near the print area for pre-print hotend heating.
gcode:

    {% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}                                                                 # Pull all variables from _KAMP_Settings
    {% set z_height = kamp_settings.smart_park_height | float %}                                                                    # Set Z height variable
    {% set purge_margin = kamp_settings.purge_margin | float %}                                                                     # Set purge margin variable
    {% set verbose_enable = kamp_settings.verbose_enable | abs %}                                                                   # Set verbosity
    {% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
    {% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
    {% set axis_maximum_x = printer.toolhead.axis_maximum.x | float %}
    {% set axis_maximum_y = printer.toolhead.axis_maximum.y | float %}
    {% set center_x = axis_maximum_x / 2 | float %}                                                                                 # Create center point of x for fallback
    {% set center_y = axis_maximum_y / 2 | float %}                                                                                 # Create center point of y for fallback
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                                # Gather all object points
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %}                                                       # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %}                                                       # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(center_x) %}                                                       # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(center_y) %}                                                       # Set y_max from largest object y point
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}                                                           # Set travel speed from config
    {% set purge_front = kamp_settings.purge_front | abs %}                                                                         # Set whether to park at the front or back of object
    

    # If objects are detected and purge margin value is greater than 0, move to purge location + margin
    {% if purge_margin > 0 %}
        {% if purge_front %}
            {% if x_min != center_x and y_min != center_y %}
                {% set x_point = [ x_min - purge_margin , x_min ] | min %}
                {% set y_point = [ y_min - purge_margin , y_min ] | min %}
                {% set x_point = [ x_point , axis_minimum_x ] | max %}
                {% set y_point = [ y_point , axis_minimum_y ] | max %}
            {% endif %}
        {% else %}
            {% if x_max != center_x and y_max != center_y %}
                {% set x_point = [ x_max + purge_margin , x_max ] | max %}
                {% set y_point = [ y_max + purge_margin , y_max ] | max %}
                {% set x_point = [ x_point , axis_maximum_x ] | min %}
                {% set y_point = [ y_point , axis_maximum_y ] | min %}
            {% endif %}
        {% endif %}
    {% endif %}
                                                                                                                                    # Verbose park location
    {% if verbose_enable == True %}

    { action_respond_info("Smart Park location: {},{}.".format(
        (x_point),
        (y_point),
    )) }

    {% endif %}
    
    SAVE_GCODE_STATE NAME=Presmartpark_State                                                                                        # Create gcode state

    G90                                                                                                                             # Absolute positioning
    {% if printer.toolhead.position.z < z_height %}
        G0 Z{z_height}                                                                                                              # Move Z to park height if current Z position is lower than z_height
    {% endif %}
    G0 X{x_point} Y{y_point} F{travel_speed}                                                                                        # Move near object area
    G0 Z{z_height}                                                                                                                  # Move Z to park height 

    RESTORE_GCODE_STATE NAME=Presmartpark_State                                                                                     # Restore gcode state